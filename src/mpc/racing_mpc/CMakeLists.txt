cmake_minimum_required(VERSION 3.8)
project(racing_mpc)

# Default to C++17.
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 17)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# Set ROS_DISTRO macros
if(NOT DEFINED ENV{ROS_DISTRO})
    message(FATAL_ERROR "Environment variable ROS_DISTRO is not defined. Have you sourced your ROS workspace?")
endif()
set(ROS_DISTRO $ENV{ROS_DISTRO})
if(${ROS_DISTRO} STREQUAL "rolling")
  add_compile_definitions(ROS_DISTRO_ROLLING)
elseif(${ROS_DISTRO} STREQUAL "galactic")
  add_compile_definitions(ROS_DISTRO_GALACTIC)
elseif(${ROS_DISTRO} STREQUAL "humble")
  add_compile_definitions(ROS_DISTRO_HUMBLE)
endif()

# Require that dependencies from package.xml be available.
find_package(casadi REQUIRED)
find_package(ament_cmake_auto REQUIRED)
ament_auto_find_build_dependencies(REQUIRED
  ${${PROJECT_NAME}_BUILD_DEPENDS}
  ${${PROJECT_NAME}_BUILDTOOL_DEPENDS}
)

# all *_impl.cpp files, which contain the main function to spin the ros nodes, 
# should be excluded from the library.
set(${PROJECT_NAME}_SRC
  src/racing_mpc.cpp
  src/ros_param_loader.cpp
  src/racing_mpc_node.cpp
  src/racing_mpc_solver_node.cpp
  src/multi_mpc_manager.cpp
  src/racing_convex_mpc.cpp
  src/racing_follow_mpc.cpp
  src/racing_mpc_function.cpp
)

set(${PROJECT_NAME}_HEADER
  include/racing_mpc/racing_mpc.hpp
  include/racing_mpc/racing_mpc_config.hpp
  include/racing_mpc/ros_param_loader.hpp
  include/racing_mpc/racing_mpc_node.hpp
  include/racing_mpc/racing_mpc_solver_node.hpp
  include/racing_mpc/multi_mpc_manager.hpp
  include/racing_mpc/racing_convex_mpc.hpp
  include/racing_mpc/racing_follow_mpc.hpp
  include/racing_mpc/racing_mpc_function.hpp
)

ament_auto_add_library(${PROJECT_NAME} SHARED
  ${${PROJECT_NAME}_SRC}
  ${${PROJECT_NAME}_HEADER}
)

ament_auto_add_library(${PROJECT_NAME}_function SHARED
  src/auto_generated/racing_mpc_function.cpp
)

target_link_libraries(${PROJECT_NAME} casadi)

ament_auto_add_executable(${PROJECT_NAME}_node_exe
  src/racing_mpc_node_impl.cpp
)

ament_auto_add_executable(${PROJECT_NAME}_solver_node_exe
  src/racing_mpc_solver_node_impl.cpp
)

ament_auto_add_executable(${PROJECT_NAME}_export_exe
  src/racing_mpc_export.cpp
)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  ament_lint_auto_find_test_dependencies()
  set(TEST_SOURCES test/test_racing_mpc.cpp)
  set(TEST_MPC_EXE test_racing_mpc)
  ament_add_gtest(${TEST_MPC_EXE} ${TEST_SOURCES})
  target_link_libraries(${TEST_MPC_EXE} ${PROJECT_NAME})
endif()

# Create & install ament package.
ament_auto_package(INSTALL_TO_SHARE
  param
  launch
  test_data
)
